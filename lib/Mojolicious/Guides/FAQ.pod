=head1 TYTUŁ

Mojolicious::Guides::FAQ - Najczęściej zadawane pytania

=head1 OPIS

Ten dokument zawiera najczęściej zadawane pytania o L<Mojolicious> razem z odpowiedziami.

=head1 PYTANIA

=head2 Czym Mojolicious różni się od innych frameworków Perla?

Odpowiedź jest krótka: "wszystkim",
ponieważ interpretujemy słowa "framework" bardziej dokładnie niż inni.
Wraz z powstaniem C<Real-time Web> i nowych technologii, takich jak
C<WebSockets>, przyjmujemy nowe wyzwania, które wykrazaczją poza to, do czego stworzone były powszechnie używane moduły, takie jak L<LWP>.
Z tego powodu L<Mojolicious> zawiera całkowicie nowy serwer i nowego klienta C<HTTP> 
L<Mojo>, mocno zainspirowanego przez orgyginalny C<LWPng>
i starannie zaprojektowanego zgodnie z nowymi wymaganiami.
Tak więc w czasie, gdy niektóre wyższe warstwy abstrakcji mogą wyglądać podobnie do innych frameworków,
Mojolicious tworzy nową kategorię i w przyszłości może nawet być podstawą dla tych bardziej zaawansowawnych.

=head2 Dlaczego Mojolicious nie ma żadnych zależności?

Optymalizujemy L<Mojolicious> ,aby był łatwy w obsłudze i szybko się rozwijał.
Dopóki nie ma żadnych zasad w L<Mojolicious::Guides::CodingGuidelines> ,które tego zabraniają, odradzamy dodawać żadnych zależności, aby przyspieszyć i ułatwić proces instalacji.
W zasadzie to używamy kilku opcjonalnych modułów CPAN takich jak L<EV>,
L<IO::Socket::IP>, L<IO::Socket::SSL>, L<Net::Rendezvous::Publish> i
L<Plack> aby zapewnić większą funkcjonalność, kiedy są zainstalowane.

=head2 Po co wyważać otwarte drzwi?

Ponieważ możemy zrobić to bardziej uniwersalnie.
Niełatwo zdobyć specjalnie zaprojektowane, przejrzyste i szybko rozwijające się komponenty.
Mocno wierzymy w mantrę Perla "Jest na to więcej niż jeden sposób.",
wierzymy także, że lepiej zaprojektowane podstawy skutkują przyjemniejszym doświadczeniem użytkownika.
Chcemy łączyć najlepsze cechy.

=head2 Co z kompatybilnością z poprzednimi wersjami?

Zgodnie z L<Mojolicious::Guides::CodingGuidelines>, zawsze odżegnamy właściwości dla przynajmniej jednej wersji przed zmianą czy usunięciem jej powodując niekompatybilność.
Nowe właściwości mogą zostać zaznaczone jako eksperymentalne, aby wyraźnie wykluczone z zasad.
To daje nam konieczną wolność, aby zapewnić przyszłość dla
L<Mojolicious>.
Więc,
dopóki nie używasz niczego eksperymentalnego, nieprzetestowanego lub nieudokumentowanego możesz zawsze liczyć na kompatybilność,
wszystko pozostałe może powodować błędy.

=head2 Co oznacza błąd "Maximum message size exceeded."?

Aby chronić twoje aplikacje przed dużymi żądaniami i odpowiedziami,
nasz parser HTTP ma ustawiony limit, po przekroczeniu którego automatycznie przestanie akceptować nowe dane,
i w większości przypadków połączenie zostanie zerwane.
Ten limit domyślnie wynosi około C<5MB>, możesz użyć zmiennej
C<MOJO_MAX_MESSAGE_SIZE>, aby zmienić tą wartość.

=head2 Co oznacza błąd "Maximum line size exceeded."?

To jest mechanizm obronny bardzo podobny do tego opisanego we wcześniejszym pytaniu,
ale trochę bardziej specyficzny.
Ogranicza on maksymalną długość wszystkich C<\r\n> kończących wiadomość HTTP,
jak na przykład linia żądania,
linia statusu czy nagłówków.
Ten limit domyślnie wynosi około C<10KB>, możesz użyć zmiennej
C<MOJO_MAX_LINE_SIZE>, aby zmienić tą wartość.

=head2 Co oznacza "Your secret passphrase needs to be changed!!!"?

L<Mojolicious> używa tajnych haseł dla bezpieczeństwa danych, takich jak podpisane ciasteczka.
Domyślnie jest to nazwa twojej aplikacji,
która nie jest bardzo bezpieczna,
więc dodaliśmy tą wiadomość jako przypomnienie.
Możesz zmienić hasło za pomocą pola C<secret> z L<Mojolicious>.

  app->secret('Moje bardzo tajne hasło.');

=head2 Wydaje mi się, że znalazłem błąd, co powinienem zrobić?

Po pierwsze upewnij się, czy używasz najnowszej wersji L<Mojolicious>, jest bardzo prawdobodobne, że błąd już został naprawiony. Jeśli to nie pomaga przygotuj przypadek testowy, demonstrujący błąd, nie oczekujemy, że zrobisz to sam, ale musisz się upewnić, czy deweloperzy potrafią odtworzyć twój problem. Wysyłanie całej twojej aplikacji przynosi więcej szkody niż pożytku, katalog 
C<t>  tej dystrybucji posiada dużo dobrych przykładów jak to zrobić dobrze. Pisanie testu jest zazwyczaj najtrudniejszą częścią naprawiania błędu, więc im lepszy twój test, tym szybciej problem zostanie rozwiązany. ;)

Jeśli już to zrobiłeś, możesz się z nami skontaktować poprzez listę mailingową 
(L<http://groups.google.com/group/mojolicious>) lub IRC
(C<#mojo> na C<irc.perl.org>).

Jeśli zdecydujesz się samemu rozwiązać problem spójrz na 
L<Mojolicious::Guides::CodingGuidelines>.

=head2 Jakiej przestrzeni nazw powinienem używać z wtyczkami do Mojolicious?

Dla wszystkich nowych wtyczek, które chcesz wydać do CPAN, sugerujemy używanie przestrzeni "Mojolicious::Plugin". Kiedyś używane było "MojoX", ale teraz jest przestarzałe.

=head1 WIĘCEJ

Możesz kontynuować czytanie L<Mojolicious::Guides> albo odwiedzić Mojolicious wiki L<http://github.com/kraih/mojo/wiki>, które zawiera dużo więcej dokumentacji i przykładów od wielu różnych autorów.

=cut
